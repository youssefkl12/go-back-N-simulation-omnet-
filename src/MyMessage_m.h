//
// Generated file, do not edit! Created by opp_msgtool 6.0 from MyMessage.msg.
//

#ifndef __MYMESSAGE_M_H
#define __MYMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MyMessage;
/**
 * Class generated from <tt>MyMessage.msg:20</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet MyMessage
 * {
 *     int M_header;
 *     string M_Payload;
 *     char M_Trailer;
 *     int M_Frame_Type; //Data=0/ACK=1 /NACK=2.
 *     int M_Ack_Nack_NUM;
 * 
 * }
 * </pre>
 */
class MyMessage : public ::omnetpp::cPacket
{
  protected:
    int M_header = 0;
    omnetpp::opp_string M_Payload;
    char M_Trailer = 0;
    int M_Frame_Type = 0;
    int M_Ack_Nack_NUM = 0;

  private:
    void copy(const MyMessage& other);

  protected:
    bool operator==(const MyMessage&) = delete;

  public:
    MyMessage(const char *name=nullptr, short kind=0);
    MyMessage(const MyMessage& other);
    virtual ~MyMessage();
    MyMessage& operator=(const MyMessage& other);
    virtual MyMessage *dup() const override {return new MyMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getM_header() const;
    virtual void setM_header(int M_header);

    virtual const char * getM_Payload() const;
    virtual void setM_Payload(const char * M_Payload);

    virtual char getM_Trailer() const;
    virtual void setM_Trailer(char M_Trailer);

    virtual int getM_Frame_Type() const;
    virtual void setM_Frame_Type(int M_Frame_Type);

    virtual int getM_Ack_Nack_NUM() const;
    virtual void setM_Ack_Nack_NUM(int M_Ack_Nack_NUM);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MyMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<MyMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MYMESSAGE_M_H

